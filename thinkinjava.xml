<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="java" deleted="false" description="启动线程接口" enabled="true" name="aThreadStart">Thread t = new Thread(new ${ThreadObj}());&#13;
t.start();</template><template autoinsert="true" context="java" deleted="false" description="线程休眠" enabled="true" name="aThreadSleep">TimeUnit.MILLISECONDS.sleep(${100});/*休眠${100}毫秒*/</template><template autoinsert="true" context="java" deleted="false" description="单线程池启动" enabled="true" name="aThreadSinglePoolExec">ExecutorService ${exec} = Executors.newSingleThreadExecutor();&#13;
for (int i = 0; i &lt; 5; i++)/*循环添加线程对象到线程池*/&#13;
	${exec}.execute(new ${ThreadObj}());/*启动线程对象*/&#13;
${exec}.shutdown();/*不再接收线程对象,线程执行完后结束*/</template><template autoinsert="true" context="java" deleted="false" description="线程结果集" enabled="true" name="aThreadResult">ExecutorService ${exec} = Executors.newCachedThreadPool();&#13;
// 返回结果集&#13;
ArrayList&lt;Future&lt;String&gt;&gt; ${results} = new ArrayList&lt;Future&lt;String&gt;&gt;();&#13;
for (int i = 0; i &lt; 10; i++)/* 迭代开启线程 */&#13;
	${results}.add(${exec}&#13;
			.submit(new ${CallObj}(${i})));/* 实现Callable&lt;String&gt;接口 */&#13;
for (Future&lt;String&gt; ${fs} : ${results}) {/*迭代处理结果集*/&#13;
	try {&#13;
		System.out.println(${fs}.get());&#13;
	} catch (InterruptedException e) {&#13;
		System.out.println(e);&#13;
		return;&#13;
	} catch (ExecutionException e) {&#13;
		System.out.println(e);&#13;
	} finally {&#13;
		${exec}.shutdown();/* 关闭线程池 */&#13;
	}&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="设置线程优先级" enabled="true" name="aThreadPriority">Thread.currentThread().setPriority(Thread.MAX_PRIORITY);/*设置线程优先级*/</template><template autoinsert="true" context="java" deleted="false" description="内部类继承线程对象" enabled="true" name="aThreadInner">class ${InnerThread} {&#13;
	private class ${Inner} extends Thread {/*内部类定义线程对象*/&#13;
		${Inner}(String name) {&#13;
			super(name);&#13;
			start();&#13;
		}&#13;
&#13;
		public void run() {&#13;
			//TODO 线程逻辑&#13;
		}&#13;
	}&#13;
	public ${InnerThread}(String name) {/*构造函数初始化内部类*/&#13;
		new ${Inner}(name);&#13;
	}&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="匿名内部类实现线程" enabled="true" name="aThreadInner">class ${InnerThread} {&#13;
	private Thread t;&#13;
	public ${InnerThread}(String name) {&#13;
		t = new Thread(name) {/*匿名内部类实现线程*/&#13;
			public void run() {&#13;
				//TODO 线程逻辑&#13;
			}&#13;
		};&#13;
		t.start();/*线程启动*/&#13;
	}&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="固定线程池启动" enabled="true" name="aThreadFixedPoolExec">ExecutorService ${exec} = Executors.newFixedThreadPool(${5});&#13;
for (int i = 0; i &lt; 5; i++)/*循环添加线程对象到线程池*/&#13;
	${exec}.execute(new ${ThreadObj}());/*启动线程对象*/&#13;
${exec}.shutdown();/*不再接收线程对象,线程执行完后结束*/</template><template autoinsert="true" context="java" deleted="false" description="自定义线程工厂" enabled="true" name="aThreadFactory">ExecutorService ${exec} = Executors.newCachedThreadPool(new ${ThreadFactory}());/*设置线程工厂*/</template><template autoinsert="true" context="java" deleted="false" description="启动守护线程" enabled="true" name="aThreadDaemon">Thread ${daemon} = new Thread(new ${ThreadObj}());&#13;
${daemon}.setDaemon(true); // 设置守护线程必须在start之前&#13;
${daemon}.start();</template><template autoinsert="true" context="java" deleted="false" description="缓存线程池启动" enabled="true" name="aThreadCachePoolExec">ExecutorService ${exec} = Executors.newCachedThreadPool();&#13;
for (int i = 0; i &lt; 5; i++)/*循环添加线程对象到线程池*/&#13;
	${exec}.execute(new ${ThreadObj}());/*启动线程对象*/&#13;
${exec}.shutdown();/*不再接收线程对象,线程执行完后结束*/</template><template autoinsert="true" context="java" deleted="false" description="缓存线程池" enabled="true" name="aThreadCachePool">ExecutorService ${exec} = Executors.newCachedThreadPool();</template></templates>